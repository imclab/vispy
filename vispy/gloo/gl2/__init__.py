# -*- coding: utf-8 -*-
# Copyright (c) 2014, Vispy Development Team.
# Distributed under the (new) BSD License. See LICENSE.txt for more info.

"""
The raw API to OpenGL ES 2.0. There are multiple implementations of this API,
available as submodules of this module. This module is a copy of one of these
submodule implementations.
"""

# NOTE: modules in this package that start with one underscore are
# autogenerated

from __future__ import division

from ...util import config, logger


class _GL_ENUM(int):

    """ Type to represent OpenGL constants.
    """
    def __new__(cls, name, value):
        base = int.__new__(cls, value)
        base.name = name
        return base

    def __repr__(self):
        return self.name


from ._constants import *  # noqa
from ._main import *

# Make our API use desktop
from . import _main, _desktop
_main.PROXY = _desktop.__dict__


def shaderSource_compat(handle, code):
    """ This version of glShaderSource applies small modifications
    to the given GLSL code in order to make it more compatible between
    desktop and ES2.0 implementations. Specifically:
      * It sets the #version pragma (if none is given already)
      * It returns a (possibly empty) set of enums that should be enabled
        (for automatically enabling point sprites)
    """

    # Make a string
    if isinstance(code, (list, tuple)):
        code = '\n'.join(code)

    # Determine whether this is a vertex or fragment shader
    code_ = '\n' + code
    is_vertex = '\nattribute' in code_
    is_fragment = not is_vertex

    # Determine whether to write the #version pragma
    write_version = True
    for line in code.splitlines():
        if line.startswith('#version'):
            write_version = False
            logger.warn('For compatibility accross different GL backends, ' +
                        'avoid using the #version pragma.')
    if write_version:
        code = '#version 120\n#line 0\n' + code

    # Do the call
    shaderSource(handle, [code])

    # Determine whether to activate point sprites
    enums = set()
    if is_fragment and 'gl_PointCoord' in code:
        enums.add(_GL_ENUM('GL_VERTEX_PROGRAM_POINT_SIZE', 34370))
        enums.add(_GL_ENUM('GL_POINT_SPRITE', 34913))
    return enums